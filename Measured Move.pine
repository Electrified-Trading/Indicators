// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© Electrified

//@version=5
indicator("Measured Move", overlay=true)
import Electrified/LocalLimit/6 as LL
import Electrified/MovingAverages/10 as MA
import Electrified/DataCleaner/5 as Data
import Electrified/Points/6 as P

upColor = color.green
dnColor = color.red

var bar = -1
bar += 1
xloc = xloc.bar_time // Time allows for more accurate projection.
isXlocTime = xloc==xloc.bar_time
isXlocBar = xloc==xloc.bar_index
xlocValue = isXlocTime ? time : bar

var samples = input.int(30, "Minimum Samples", minval=2) + 2
var samples2x = samples * 2
var durationBias = input.float(1.0, "Short Duration Bias", minval=0, maxval=1, step=0.1, tooltip="The higher the number, the less 'weight' a longer duration move has.")
var deviationCutoff = input.float(2.0, "Deviation Cutoff", minval=0.1, step=0.1, tooltip="The point where data points are ignored.")

getATR(simple string mode, simple int period, simple float maxDev) =>
    trCleaned = maxDev==0 ? ta.tr : Data.naOutliers(ta.tr, period, maxDev)
    MA.get(mode, period, trCleaned)
////

padding = getATR("WMA",
  input.int(2000, "Length", group="Volatility", minval=10), 4) *
  input.float(16.0, "Multiple", group="Volatility", minval=0, step=0.1)
////

getLabelX(label label) => na(label) ? na : label.get_x(label)
getLabelY(label label) => na(label) ? na : label.get_y(label)
getLabelXY(label label) => [getLabelX(label), getLabelY(label)]

lowestOffsetBar(int limit) =>
    var lows = array.new_float()
    if limit<1
        [int(na), float(na)]
    else
        array.push(lows, low)
        size = array.size(lows)
        if size > limit
            array.shift(lows)
            size -= 1

        last = size - 1
        n = 0, lo = low
        if size > 1
            for i = 0 to last - 1
                v = array.get(lows, i)
                if v<=lo
                    n := last - i
                    lo := v
        [n, lo]
////

highestOffsetBar(int limit) =>
    var highs = array.new_float()
    if limit<1
        [int(na), float(na)]
    else
        array.push(highs, high)
        size = array.size(highs)
        if size > limit
            array.shift(highs)
            size -= 1

        last = size - 1
        n = 0, hi = high
        if size > 1
            for i = 0 to last - 1
                v = array.get(highs, i)
                if v>=hi
                    n := last - i
                    hi := v
        [n, hi]
////

var lastLo = isXlocTime ? time : 0
var lastHi = isXlocTime ? time : 0
var lastLoValue = low
var lastHiValue = high
var labelsLo = array.new_label()
var labelsHi = array.new_label()
var loXValues = array.new_int()
var hiXValues = array.new_int()
var loYValues = array.new_float()
var hiYValues = array.new_float()
var label lastLoLabel = na
var label lastHiLabel = na
var label activeLoLabel = label.new(xlocValue, low, xloc=xloc, yloc=yloc.belowbar, color=color.gray, textcolor=color.white, style=label.style_triangleup, size=size.tiny)
var label activeHiLabel = label.new(xlocValue, high, xloc=xloc, yloc=yloc.abovebar, color=color.gray, textcolor=color.white, style=label.style_triangledown, size=size.tiny)
loL = LL.lower(low, padding)
hiL = LL.upper(high, padding)
loLT = LL.trend(loL), loLT1 = loLT[1]
hiLT = LL.trend(hiL), hiLT1 = hiLT[1]

DISPLAY = "Display", TOOLTIP="Note: there is a limit to how much can be displayed and so not all drawings (lines, boxes or dots) will be visible."
var enableLimitPlot = input.bool(true, "Upper lower limit plots", group=DISPLAY)
var plotDeviation = input.bool(true, "Deviation cones", group=DISPLAY)
var useLines = input.bool(false, "Source Vectors (lines)", group=DISPLAY, tooltip=TOOLTIP)
useBoxes = false//input.bool(false, "Source Heatmap (boxes)", group=DISPLAY, tooltip=TOOLTIP)
var useDots = input.bool(false, "Source Plot (dots)", group=DISPLAY, tooltip=TOOLTIP)
plot(enableLimitPlot ? hiL : na, "Limit High", color.orange, 1, style=plot.style_circles)
plot(enableLimitPlot ? loL : na, "Limit Low", color.blue, 1, style=plot.style_circles)

getXYTooltip(int x, float y) =>
    str.tostring(x)+': '+str.tostring(y)
////

addLabel(label[] labels, int i, label n) =>
    size = array.size(labels)
    if i==size
        array.push(labels, n)
    else if i==0
        array.unshift(labels, n)
    else
        array.insert(labels, i, n)
    n
////

addLoPoint(int x, float y) =>
    [i, _x, _y] = P.add(loXValues, loYValues, x, y)
    addLabel(labelsLo, i, label.new(x, y, xloc=xloc, yloc=yloc.belowbar, color=color.blue, style=label.style_triangleup, size=size.tiny, tooltip=getXYTooltip(x, y)))
////

addHiPoint(int x, float y) =>
    [i, _x, _y] = P.add(hiXValues, hiYValues, x, y)
    addLabel(labelsHi, i, label.new(x, y, xloc=xloc, yloc=yloc.abovebar, color=color.orange, style=label.style_triangledown, size=size.tiny, tooltip=getXYTooltip(x, y)))
////

deleteLoPoint(int index = na) =>
    lbl = if na(index)
        P.shift(loXValues, loYValues)
        array.shift(labelsLo)
    else
        P.remove(loXValues, loYValues, index)
        array.remove(labelsLo, index)
    label.delete(lbl)
////
deleteHiPoint(int index = na) =>
    lbl = if na(index)
        P.shift(hiXValues, hiYValues)
        array.shift(labelsHi)
    else
        P.remove(hiXValues, hiYValues, index)
        array.remove(labelsHi, index)
    label.delete(lbl)
////

deleteLowerBetweenHighs(int start, int end) =>
    indexes = P.allIndexesBetween(hiXValues, start, end, ordered = true)
    size = array.size(indexes)
    if size == 0
        [int(na), float(na)]
    else
        hiIndex = array.pop(indexes)
        hiValue = array.get(hiYValues, hiIndex)
        size -= 1
        while size > 0
            nIndex = array.pop(indexes)
            nValue = array.get(hiYValues, nIndex)
            size -= 1
            if hiValue < nValue
                deleteHiPoint(hiIndex)
                hiValue := nValue
                hiIndex := nIndex
            else
                deleteHiPoint(nIndex)
                hiIndex -= 1
        [hiIndex, hiValue]
////


deleteHigherBetweenLows(int start, int end) =>
    indexes = P.allIndexesBetween(loXValues, start, end, ordered = true)
    size = array.size(indexes)
    if size == 0
        [int(na), float(na)]
    else
        loIndex = array.pop(indexes)
        loValue = array.get(loYValues, loIndex)
        size -= 1
        while size > 0
            nIndex = array.pop(indexes)
            nValue = array.get(loYValues, nIndex)
            size -= 1
            if loValue > nValue
                deleteLoPoint(loIndex)
                loValue := nValue
                loIndex := nIndex
            else
                deleteLoPoint(nIndex)
                loIndex -= 1
        [loIndex, loValue]
////


// Add labels as data points are confirmed.
if loLT < loLT1
    // addHiPoint(bar - hbo, highest)
    lastLoLabel := addLoPoint(lastLo, lastLoValue)

    count = 0
    last = array.size(loXValues) - 1
    while last > 0 and count < 2
        p1 = array.get(loXValues, last - 1)
        p2 = array.get(loXValues, last)
        deleteLowerBetweenHighs(p1, p2)
        last -= 1
        count += 1

////
if hiLT > hiLT1
    // addLoPoint(bar - lbo, lowest)
    lastHiLabel := addHiPoint(lastHi, lastHiValue)

    count = 0
    last = array.size(labelsHi) - 1
    while last > 0 and count < 2
        p1 = array.get(hiXValues, last - 1)
        p2 = array.get(hiXValues, last)
        deleteHigherBetweenLows(p1, p2)
        last -= 1
        count += 1
////

// Update the new lows and highs.
if loL < loL[1]
    lastLo := xlocValue
    lastLoValue := low
    label.set_xy(activeLoLabel, lastLo, loL)
    label.set_tooltip(activeLoLabel, getXYTooltip(bar, loL))
////
if hiL > hiL[1]
    lastHi := xlocValue
    lastHiValue := high
    label.set_xy(activeHiLabel, lastHi, hiL)
    label.set_tooltip(activeHiLabel, getXYTooltip(bar, hiL))
////

// Keep recent points up to date
if loL != loL[1]
    deleteLowerBetweenHighs(getLabelX(lastLoLabel), lastLo)
////
if hiL != hiL[1]
    deleteHigherBetweenLows(getLabelX(lastHiLabel), lastHi)
////

// Don't retain labels that won't get used.
if array.size(labelsLo) > samples2x
    deleteLoPoint()
////
if array.size(labelsHi) > samples2x
    deleteHiPoint()
////

var lines = array.new_line()
var boxes = array.new_box()
var dots = array.new_label()

addLine(int x, float y, int dx, float dy, color c, int width = 2, string style = line.style_solid) =>
    array.push(lines, line.new(x, y, x+dx, y+dy, xloc, extend.none, c, style, width))

addBox(int x, float y, int dx, float dy, color c, string txt = na, text_color = color.white, text_valign=text.align_top) =>
    array.push(boxes, box.new(x, y, x+dx, y+dy, border_color=na, border_width=0, xloc=xloc, extend=extend.none, bgcolor=c,
      text=txt, text_size=size.small, text_color=text_color, text_halign=text.align_right, text_valign=text_valign))

addDot(int x, float y, int dx, float dy, color c, string tooltip = na) =>
    array.push(dots, label.new(x+dx, y+dy, xloc=xloc, color=c, style=label.style_circle, size=size.tiny, tooltip=tooltip))

drawBoundary(int x, float y, int[] spans, float[] deltas, color c, string txt = na, text_color = color.white) =>
    x1 = array.min(spans)
    dx1 = array.max(spans) - x1
    dMin = array.min(deltas)
    dMax = array.max(deltas)

    y1 = (dMin>0 ? dMin : dMax) * y
    dy1 = (dMin>0 ? dMax : dMin) * y - y1
    addBox(x+x1, y+y1, dx1, dy1, c, txt, text_color, text_valign = dMin>0 ? text.align_top : text.align_bottom)

plotPercentMoves(int[] spans, float[] deltas, int x, float y, color c) =>
    size = P.size(spans, deltas)
    cBox = color.new(c, 95)
    cLine = color.new(c, 75)
    cDot = color.new(c, 25)
    if size == 0
        size := na
    for i = 0 to size - 1
        [dx, dy] = P.get(spans, deltas, i)      
        if isXlocBar and dx > 500
            dy := dx * dy / 500
            dx := 500 
        if useBoxes
            addBox(x, y, dx, y * dy, cBox)
        if useLines
            addLine(x, y, dx, y * dy, cLine)
        if useDots
            addDot(x, y, dx, y * dy, cDot)

cleanPoints(int[] spans, float[] deltas, float maxDev) =>
    spanMax = array.avg(spans) + maxDev * array.stdev(spans)
    deltaAvg = array.avg(deltas)
    if deltaAvg < 0
        deltaAvg := -deltaAvg

    deltaMax = deltaAvg + maxDev * array.stdev(deltas)
    size = P.size(spans, deltas)
    if size == 0
        size := na
    for i = size - 1 to 0
        [dx, dy] = P.get(spans, deltas, i)
        if dx > spanMax or math.abs(dy) > deltaMax
            P.remove(spans, deltas, i)

    [spans, deltas]

durationBiasedAverages(int[] spans, float[] deltas) =>
    max = array.max(spans)
    sumX = 0.0, sumY = 0.0
    weight = 0.0
    size = P.size(spans, deltas)
    if size == 0
        size := na
    for i = 0 to size - 1
        [dx, dy] = P.get(spans, deltas, i)
        w = max - dx * durationBias
        sumX += dx * w
        sumY += dy * w
        weight += w
    [int(sumX/weight), sumY/weight]

if barstate.islast

    for e in lines
        line.delete(e)
    array.clear(lines)
    for e in boxes
        box.delete(e)
    array.clear(boxes)
    for e in dots
        label.delete(e)
    array.clear(dots)    
    [loSpans, loDeltas] = P.new()
    [hiSpans, hiDeltas] = P.new()

    // Determine the vectors.
    countL = 0, countH = 0
    [activeLoX, activeLoY] = getLabelXY(activeLoLabel)
    [activeHiX, activeHiY] = getLabelXY(activeHiLabel)
    max = math.min(activeLoX, activeHiX)
    maxLoIndex = P.lastIndexBelow(loXValues, max)
    maxHiIndex = P.lastIndexBelow(hiXValues, max)

    while maxLoIndex!=-1 and maxHiIndex!=-1 and (countL<samples or countH<samples)

        [loX, loY] = P.get(loXValues, loYValues, maxLoIndex)
        [hiX, hiY] = P.get(hiXValues, hiYValues, maxHiIndex)
        dx = loX < hiX ? hiX - loX : loX - hiX
        dy = loX < hiX ? (hiY - loY) / loY : (loY - hiY) / hiY // use %

        if loX<hiX
            P.push(loSpans, loDeltas, dx, dy)
            maxHiIndex := P.lastIndexBelow(hiXValues, hiX, maxHiIndex)
            countL += 1
        else
            P.push(hiSpans, hiDeltas, dx, dy)
            maxLoIndex := P.lastIndexBelow(loXValues, loX, maxLoIndex)
            countH += 1

    // Remove any well established outliers.
    cleanPoints(loSpans, loDeltas, 4)
    cleanPoints(hiSpans, hiDeltas, 4)

    // Ignore cutoff.
    cleanPoints(loSpans, loDeltas, deviationCutoff)
    cleanPoints(hiSpans, hiDeltas, deviationCutoff)

    if useLines or useBoxes or useDots
        plotPercentMoves(loSpans, loDeltas, activeLoX, activeLoY, upColor)
        plotPercentMoves(hiSpans, hiDeltas, activeHiX, activeHiY, dnColor)

    [loSpanAvg, loDeltaAvg] = durationBiasedAverages(loSpans, loDeltas)
    addLine(activeLoX, activeLoY, loSpanAvg, activeLoY*loDeltaAvg, upColor, 4)

    [hiSpanAvg, hiDeltaAvg] = durationBiasedAverages(hiSpans, hiDeltas)
    addLine(activeHiX, activeHiY, hiSpanAvg, activeHiY*hiDeltaAvg, dnColor, 4)    

    for i = 4 to 1
        dev = i / 2.0
        [sL, dL] = cleanPoints(array.copy(loSpans), array.copy(loDeltas), dev)
        drawBoundary(activeLoX, activeLoY, sL, dL, color.new(upColor, 90))
        [sH, dH] = cleanPoints(array.copy(hiSpans), array.copy(hiDeltas), dev)
        drawBoundary(activeHiX, activeHiY, sH, dH, color.new(dnColor, 90))
        
        // lineWidth = 4-dev

        // loSpanStdev = array.stdev(loSpans)
        // loDeltaStdev = array.stdev(loDeltas)
        // addLine(activeLoX, activeLoY, loSpanAvg+loSpanStdev, activeLoY*(loDeltaAvg-loDeltaStdev), upColor, lineWidth, line.style_dashed)  
        // addLine(activeLoX, activeLoY, loSpanAvg-loSpanStdev, activeLoY*(loDeltaAvg+loDeltaStdev), upColor, lineWidth, line.style_dashed)  


        // hiSpanStdev = array.stdev(hiSpans)
        // hiDeltaStdev = array.stdev(hiDeltas)
        // addLine(activeHiX, activeHiY, hiSpanAvg+hiSpanStdev, activeHiY*(hiDeltaAvg+hiDeltaStdev), dnColor, lineWidth, line.style_dashed)  
        // addLine(activeHiX, activeHiY, hiSpanAvg-hiSpanStdev, activeHiY*(hiDeltaAvg-hiDeltaStdev), dnColor, lineWidth, line.style_dashed)  
           
////////